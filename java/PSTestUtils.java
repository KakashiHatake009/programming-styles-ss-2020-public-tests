
/**
 * Programming Styles SoSe 20 Testing Utilities
 */
import static org.hamcrest.io.FileMatchers.anExistingDirectory;
import static org.hamcrest.io.FileMatchers.anExistingFile;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Stream;

import org.junit.Assume;

public class PSTestUtils {

    public final static String PREY_AND_HUNTERS_CLASS_NAME = "PreyAndHunters";

    public final static String PREY_AND_HUNTERS_HOME = "pah.home";
    public final static String JAVA = "pah.java";

    /**
     * Check whether the requires system properties are correctly set. Not that if
     * any of those conditions fail the tests will be considered non meaningful;
     * consequently the will be SKIPPED. In other words, tests will not FAIL because
     * of non-met assumptions. </br>
     * 
     * @see <a href=
     *      "https://junit.org/junit4/javadoc/4.13/org/junit/Assume.html">https://junit.org/junit4/javadoc/4.13/org/junit/Assume.html</a>
     * 
     */
    public static void validateTheExecutionEnvironment() {
        Assume.assumeNotNull(getPreyAndHunter());
        Assume.assumeNotNull(getJava());
        // See https://www.baeldung.com/hamcrest-file-matchers
        Assume.assumeThat(new File(getPreyAndHunter()), anExistingDirectory());
        Assume.assumeThat(new File(getPreyAndHunter(), PREY_AND_HUNTERS_CLASS_NAME + ".class"), anExistingFile());
        // TODO Check if the java version returned by getJava() is indeed 11
    }

    public static String getPreyAndHunter() {
        return System.getProperty(PREY_AND_HUNTERS_HOME);
    }

    /**
     * Return the specified java environment or simply java, assuming that your java
     * is configured to be the java command from the JDK 11
     * 
     * @return
     */
    public static String getJava() {
        return System.getProperty(JAVA, "java");
    }

    /**
     * Execute the PreyAndHunters version pointed by getPreyAndHunter() with the
     * given arguments and return the a copy of the output generated by the program
     * as a String
     * 
     * @param args
     * @throws IOException
     */
    public static Map.Entry<Integer, String> executePreyAndHuntersWithArgs(String... args) throws Exception {
        String[] _args = Stream.concat(Arrays.stream(new String[] {
                // Java executable and Program Name/Class Name
                getJava(), PREY_AND_HUNTERS_CLASS_NAME }),
                // Input arguments
                Arrays.stream(args)).toArray(String[]::new);

        ProcessBuilder pb = new ProcessBuilder(_args);

        pb.directory(new File(getPreyAndHunter()));

        Process process = pb.start();

        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder builder = new StringBuilder();
        String line = null;
        while ((line = reader.readLine()) != null) {
            builder.append(line);
            builder.append(System.getProperty("line.separator"));
        }

        String result = builder.toString();
        int exitCode = process.waitFor();

        return new AbstractMap.SimpleEntry<Integer, String>(exitCode, result);
    }

}